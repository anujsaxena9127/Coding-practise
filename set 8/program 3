//solutions in c
#include<stdio.h>

int remove_duplicate_elements(int arr[], int n)
{

if (n==0 || n==1)
return n;

int temp[n];

int j = 0;
int i;
for (i=0; i<n-1; i++)
if (arr[i] != arr[i+1])
temp[j++] = arr[i];
temp[j++] = arr[n-1];

for (i=0; i<j; i++)
arr[i] = temp[i];

return j;
}


int main()
{
int n;
scanf("%d",&n);
int arr[n];
int i;
for(i = 0; i < n; i++)
{
scanf("%d",&arr[i]);
}

n = remove_duplicate_elements(arr, n);


for (i=0; i<n; i++)
printf("%d ",arr[i]);

return 0;
}

output:-
5
1 2 3 4 4
1 2 3 4

//solutions in java
import java.util.HashMap;

public class removeduplicateelements {
    public static void main(String[] args) {
        {
            int arr[] = {1, 2, 3, 4,4};
            HashMap<Integer, Integer> a = new HashMap<>();
            for (int x : arr) {
                if (!a.containsKey(x)) {
                    a.put(x, 1);
                } else {
                    a.put(x, a.get(x) + 1);
                }
            }
            for (Integer x : a.keySet()) {

                    System.out.println( a.keySet());
                    break;
            }
        }
    }
}
output:-
[1, 2, 3, 4]
